const { ethers } = require("ethers")
const fs = require("fs-extra")

require("dotenv").config()

async function main() {
    const provider = new ethers.JsonRpcProvider(process.env.RPC_URL)
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider)
    // const encryptedJson = fs.readFileSync("./encryptedKey.json", "utf8");
    // let wallet = await ethers.Wallet.fromEncryptedJson(encryptedJson, process.env.PASSWORD);
    // wallet = await wallet.connect(provider);
    const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8")
    const bytecode = fs.readFileSync(
        "./SimpleStorage_sol_SimpleStorage.bin",
        "utf8",
    )

    const factory = new ethers.ContractFactory(abi, bytecode, wallet)
    console.log("Deploying contract...")
    // const deploymentOptions = {
    //     gasLimit: 67219753,
    // }
    const contract = await factory.deploy()
    // const contract = await factory.deploy({gasLimit: 3000000});
    const transactionReceipt = await contract.deploymentTransaction(1)
    console.log(`Contract address: ${contract.address}`)
    // console.log("Here is the deployment transaction: ");
    // console.log(contract.deploymentTransaction);
    // console.log("Here is the transaction rceipt: ");
    // console.log(transactionReceipt);

    // console.log("Let's deploy with only transaction data");
    // const nonce = await wallet.getTransactionCount();
    // const tx = {
    //   nonce: nonce,
    //   gasLimit: 3000000,
    //   gasPrice: 1000000000,
    //   to: null,
    //   value: 0,
    //   data: "0x60806040526040518060400160405280600281526020016040518060400160405280600781526020017f5072616e7368750000000000000000000000000000000000000000000000000081525081525060015f820151815f01556020820151816001019081620000709190620002ea565b5050503480156200007f575f80fd5b50620003ce565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200010257607f821691505b602082108103620001185762000117620000bd565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026200017c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200013f565b6200018886836200013f565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620001d2620001cc620001c684620001a0565b620001a9565b620001a0565b9050919050565b5f819050919050565b620001ed83620001b2565b62000205620001fc82620001d9565b8484546200014b565b825550505050565b5f90565b6200021b6200020d565b62000228818484620001e2565b505050565b5b818110156200024f57620002435f8262000211565b6001810190506200022e565b5050565b601f8211156200029e5762000268816200011e565b620002738462000130565b8101602085101562000283578190505b6200029b620002928562000130565b8301826200022d565b50505b505050565b5f82821c905092915050565b5f620002c05f1984600802620002a3565b1980831691505092915050565b5f620002da8383620002af565b9150826002028217905092915050565b620002f58262000086565b67ffffffffffffffff81111562000311576200031062000090565b5b6200031d8254620000ea565b6200032a82828562000253565b5f60209050601f83116001811462000360575f84156200034b578287015190505b620003578582620002cd565b865550620003c6565b601f19841662000370866200011e565b5f5b82811015620003995784890151825560018201915060208501945060208101905062000372565b86831015620003b95784890151620003b5601f891682620002af565b8355505b6001600288020188555050505b505050505050565b610a2280620003dc5f395ff3fe608060405234801561000f575f80fd5b5060043610610086575f3560e01c806377ec2b551161005957806377ec2b5514610112578063795fff1d146101315780639e7a13ad1461014d578063c7a0d9f61461017e57610086565b80632e64cec11461008a57806343ec8f47146100a85780634f2be91f146100d85780636057361d146100f6575b5f80fd5b61009261019c565b60405161009f91906103cf565b60405180910390f35b6100c260048036038101906100bd9190610535565b6101a4565b6040516100cf91906103cf565b60405180910390f35b6100e06101d1565b6040516100ed91906103cf565b60405180910390f35b610110600480360381019061010b91906105a6565b6101d9565b005b61011a6101e2565b60405161012892919061064b565b60405180910390f35b61014b60048036038101906101469190610679565b610279565b005b610167600480360381019061016291906105a6565b6102fd565b60405161017592919061064b565b60405180910390f35b6101866103b2565b60405161019391906103cf565b60405180910390f35b5f8054905090565b6004818051602081018201805184825260208301602085012081835280955050505050505f915090505481565b5f6002905090565b805f8190555050565b6001805f0154908060010180546101f890610700565b80601f016020809104026020016040519081016040528092919081815260200182805461022490610700565b801561026f5780601f106102465761010080835404028352916020019161026f565b820191905f5260205f20905b81548152906001019060200180831161025257829003601f168201915b5050505050905082565b6003604051806040016040528083815260200184815250908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f015560208201518160010190816102d391906108cd565b505050806004836040516102e791906109d6565b9081526020016040518091039020819055505050565b6003818154811061030c575f80fd5b905f5260205f2090600202015f91509050805f01549080600101805461033190610700565b80601f016020809104026020016040519081016040528092919081815260200182805461035d90610700565b80156103a85780601f1061037f576101008083540402835291602001916103a8565b820191905f5260205f20905b81548152906001019060200180831161038b57829003601f168201915b5050505050905082565b5f5481565b5f819050919050565b6103c9816103b7565b82525050565b5f6020820190506103e25f8301846103c0565b92915050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61044782610401565b810181811067ffffffffffffffff8211171561046657610465610411565b5b80604052505050565b5f6104786103e8565b9050610484828261043e565b919050565b5f67ffffffffffffffff8211156104a3576104a2610411565b5b6104ac82610401565b9050602081019050919050565b828183375f83830152505050565b5f6104d96104d484610489565b61046f565b9050828152602081018484840111156104f5576104f46103fd565b5b6105008482856104b9565b509392505050565b5f82601f83011261051c5761051b6103f9565b5b813561052c8482602086016104c7565b91505092915050565b5f6020828403121561054a576105496103f1565b5b5f82013567ffffffffffffffff811115610567576105666103f5565b5b61057384828501610508565b91505092915050565b610585816103b7565b811461058f575f80fd5b50565b5f813590506105a08161057c565b92915050565b5f602082840312156105bb576105ba6103f1565b5b5f6105c884828501610592565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156106085780820151818401526020810190506105ed565b5f8484015250505050565b5f61061d826105d1565b61062781856105db565b93506106378185602086016105eb565b61064081610401565b840191505092915050565b5f60408201905061065e5f8301856103c0565b81810360208301526106708184610613565b90509392505050565b5f806040838503121561068f5761068e6103f1565b5b5f83013567ffffffffffffffff8111156106ac576106ab6103f5565b5b6106b885828601610508565b92505060206106c985828601610592565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061071757607f821691505b60208210810361072a576107296106d3565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261078c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610751565b6107968683610751565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6107d16107cc6107c7846103b7565b6107ae565b6103b7565b9050919050565b5f819050919050565b6107ea836107b7565b6107fe6107f6826107d8565b84845461075d565b825550505050565b5f90565b610812610806565b61081d8184846107e1565b505050565b5b81811015610840576108355f8261080a565b600181019050610823565b5050565b601f8211156108855761085681610730565b61085f84610742565b8101602085101561086e578190505b61088261087a85610742565b830182610822565b50505b505050565b5f82821c905092915050565b5f6108a55f198460080261088a565b1980831691505092915050565b5f6108bd8383610896565b9150826002028217905092915050565b6108d6826105d1565b67ffffffffffffffff8111156108ef576108ee610411565b5b6108f98254610700565b610904828285610844565b5f60209050601f831160018114610935575f8415610923578287015190505b61092d85826108b2565b865550610994565b601f19841661094386610730565b5f5b8281101561096a57848901518255600182019150602085019450602081019050610945565b868310156109875784890151610983601f891682610896565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b5f6109b0826105d1565b6109ba818561099c565b93506109ca8185602086016105eb565b80840191505092915050565b5f6109e182846109a6565b91508190509291505056fea26469706673582212204ad23e461c4aedcd0663f04ae0cdf72a850e04e0a1402ca2c7eded24e750a14564736f6c63430008170033",
    //   chainId: 1337,
    // };

    // // const signedTx = await wallet.signTransaction(tx);
    // // console.log(signedTx);
    // const sentTx = await wallet.sendTransaction(tx);
    // await sentTx.wait(1);
    // console.log(sentTx);

    // Now lets see how to interact with the contract
    const currentNumber = await contract.retrieve()
    console.log("Current number: ", currentNumber.toString())
    const transactionResponse = await contract.store("46")
    const receipt = await transactionResponse.wait(1)
    const updatedNumber = await contract.retrieve()
    console.log("Updated number: ", updatedNumber.toString())
}

main()
    .then(() => process.exit(0))
    .catch((err) => {
        console.log(err)
        process.exit(1)
    })
